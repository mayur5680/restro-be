name: Local Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize, ready_for_review]
  workflow_dispatch:

jobs:
  Docker-Compose:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}

    steps:
      - name: Pin Node to 18
        uses: actions/setup-node@v4
        with:
          node-version: 18
          always-auth: true

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Set up AWS
        uses: guzmanygomez/github-actions/setup-aws-config@main
        with:
          AWS_KEY: ${{ secrets.AWS_CODEARTIFACT_KEY }}
          AWS_SECRET: ${{ secrets.AWS_CODEARTIFACT_SECRET }}
          AWS_REGION: ${{ secrets.AWS_CODEARTIFACT_REGION }}

      - name: Set up AWS CodeArtifact
        uses: guzmanygomez/github-actions/code-artifact@main

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Node Modules
        run: yarn install

      - name: Set up AWS Test
        uses: guzmanygomez/github-actions/setup-aws-config@main
        with:
          AWS_KEY: ${{ secrets.AWS_OPS_TEST_DEPLOY_KEY }}
          AWS_SECRET: ${{ secrets.AWS_OPS_TEST_DEPLOY_SECRET }}
          AWS_REGION: ${{ secrets.AWS_OPS_TEST_DEPLOY_REGION }}

      - name: Copy npmrc with GYG Code Artifact npm repo authentication
        run: cp ~/.npmrc .

      - name: Build CDK
        env:
          GYG_PLATFORM: ops
          GYG_ENV: test
          GYG_REGION: australia
          AWS_REGION: ap-southeast-2
        run: yarn cdk:build

      - name: Prepare vpn profile secret key id
        id: prepare-vpn-profile
        run: |
          if [ $GYG_ENV == 'prod' ];
          then echo 'vpn_profile_secret_key=VPN_PROFILE_PROD' >> $GITHUB_OUTPUT;
          else echo 'vpn_profile_secret_key=VPN_PROFILE' >> $GITHUB_OUTPUT;
          fi

      - name: Set up vpn profile
        # Need to let openvpn run in backgroup with --daemon because openvpn will take the main terminal thread until session is close
        # Terminal thread will not move to next step until the openvpn session is close
        run: |
          sudo apt update
          sudo apt-get install -y openvpn
          echo "${{ secrets[steps.prepare-vpn-profile.outputs.vpn_profile_secret_key] }}" > /tmp/vpn_profile.ovpn
          sudo openvpn --config /tmp/vpn_profile.ovpn --daemon

      - name: Build Local docker
        run: |
          docker compose build
          docker compose up --detach
          sleep 30 # TODO: run a deterministic wait with timeout
          docker compose logs

      - name: Check site is healthy
        run: |
          curl -v -Is -w "%{http_code}" -A "Chrome" -L "http://localhost:3000/health" -o /dev/null | grep 200
