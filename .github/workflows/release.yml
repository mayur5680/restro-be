name: Create Release
run-name: Release "${{ inputs.tag_version }}"

on:
    workflow_call:
        inputs:
          tag_version:
              description: 'Version number type to release (major|minor|patch)'
              type: string
              required: true
    workflow_dispatch:
        inputs:
            tag_version:
                description: 'Version number type to release (major|minor|patch)'
                required: true
                default: 'patch' 
                type: choice
                options:
                - major
                - minor
                - patch

jobs:
    Only-Run-Main-Branch:
        runs-on: ubuntu-latest
        steps:
          - name: Check only release from "main"
            run: |
              if [ ${{ github.ref_name }} != 'main' ]; then
                exit 1;
              fi
    Tag-Release:
        needs: Only-Run-Main-Branch
        runs-on: ubuntu-latest
        outputs:
          version: ${{ steps.tag-release.outputs.version }}
        steps:
          - name: Pin Node to 18
            uses: actions/setup-node@v4
            with:
              node-version: 18
              always-auth: true
    
          - uses: actions/checkout@v4
            with:
              token: ${{ secrets.BYPASS_TOKEN }}
    
          - name: Set up git name and email
            uses: guzmanygomez/github-actions/setup-git-name-and-email@main
    
          - name: Extract branch name
            shell: bash
            run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
            id: extract_branch
    
          - id: tag-release
            name: Tag release
            uses: guzmanygomez/github-actions/release-tag@main
            with:
              version: ${{ inputs.tag_version }}
              branch: ${{ steps.extract_branch.outputs.branch }}

    Release:
        needs: [Tag-Release]
        runs-on: ubuntu-latest
        steps:
            - name: Pin Node to 18
              uses: actions/setup-node@v4
              with:
                  node-version: 18

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              id: yarn-cache
              with:
                  path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-yarn-

            - name: Set up AWS
              uses: guzmanygomez/github-actions/setup-aws-config@main
              with:
                  AWS_KEY: ${{ secrets.AWS_CODEARTIFACT_KEY }}
                  AWS_SECRET: ${{ secrets.AWS_CODEARTIFACT_SECRET }}
                  AWS_REGION: ${{ secrets.AWS_CODEARTIFACT_REGION }}

            - name: Set up AWS CodeArtifact
              uses: guzmanygomez/github-actions/code-artifact@main

            - name: Extract branch name
              shell: bash
              run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
              id: extract_branch

            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  ref: ${{ steps.extract_branch.outputs.branch }}

            - name: Install Node Modules
              run: yarn install

    Release-Status:
        needs: [Tag-Release, Release]
        runs-on: ubuntu-latest
        if: failure()
        env:
          ARTIFACT_VERSION: ${{ needs.Tag-Release.outputs.version }}
        steps:
          - name: Extract branch name
            shell: bash
            run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
            id: extract_branch
    
          - uses: actions/checkout@v4
            with:
              fetch-depth: 0
              ref: ${{ steps.extract_branch.outputs.branch }}
    
          - name: Set Release Title Failure
            run: |
              echo "Setting git tag to $ARTIFACT_VERSION-broken"
              echo ${{ github.token }} | gh auth login --with-token
              gh release edit $ARTIFACT_VERSION --title $ARTIFACT_VERSION-broken
            shell: bash

    Notify-Slack:
        needs: [Release, Tag-Release]
        runs-on: ubuntu-latest
        if: always()
        steps:
          - name: Slack Notification
            uses: rtcamp/action-slack-notify@v2
            env:
              SLACK_CHANNEL: r365-release
              SLACK_COLOR: ${{ needs.Release.result }}
              SLACK_TITLE: 'Release Resto365 BE ${{ needs.Release.result }}'
              SLACK_MESSAGE: "Release BE version ${{ needs.Tag-Release.outputs.version }} with branch '${{ github.ref }}'"
              SLACK_USERNAME: Github
              SLACK_WEBHOOK: ${{ vars.GYG_ADMINSPHERE_SLACK_WEBHOOK }}
    