import { AuditMetadata, Store } from '@modules/store/entities/store.entity';
import { faker } from '@faker-js/faker';

export class StoreFactory {
  static getStore(store: Partial<Store> = {}): Store {
    return {
      id: store.id || faker.number.int(),
      name: faker.company.name(),
      posStoreId: faker.number.int(),
      oldStoreId: faker.number.int(),
      description: 'Store description',
      timeZone: 'UTC',
      address1: faker.location.street(),
      address2: '',
      city: faker.location.city(),
      postCode: faker.location.zipCode(),
      country: 'Australia',
      state: faker.location.state(),
      longitude: 0,
      latitude: 0,
      email: faker.internet.email(),
      createdAt: faker.date.recent(),
      createdBy: faker.number.int(),
      updatedAt: faker.date.recent(),
      updatedBy: faker.number.int(),
      orderLink: '',
      cateringLink: '',
      phone: faker.phone.number(),
      storeAlertEmail: faker.internet.email(),
      displayOrder: 0,
      isActive: true,
      isTest: faker.datatype.boolean(),
      inActiveReason: '',
      isFoodCourt: faker.datatype.boolean(),
      hasBreakfast: faker.datatype.boolean(),
      hasCoffee: false,
      maxOrderValue: 0,
      minOrderValue: 0,
      orderAlertValueThreshold: 0,
      syncLoyaltyDollars: faker.datatype.boolean(),
      syncLoyaltyPoints: faker.datatype.boolean(),
      googlePlaceId: '',
      gst: 0,
      isGstIncluded: faker.datatype.boolean(),
      taxOfficeCode: '',
      brandSiteRestaurantLink: '',
      fax: '',
      orderingId: '',
      orderingName: '',
      campaignMonitorCode: '',
      primaryMarketingArea: '',
      trafficVolume: faker.number.int(),
      additionalDetails: '',
      storeGroup: '',
      longDescription: '',
      formattedStoreName: '',
      disableStoreOrder: faker.datatype.boolean(),
      isPermanentlyClosed: faker.datatype.boolean(),
      pickupInstruction: '',
      tags: [],
      _metadata: {} as AuditMetadata,
    };
  }
}
